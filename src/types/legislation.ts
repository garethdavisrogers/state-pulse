import {ObjectId} from "mongodb";

export interface Legislation {
  id: string;
  identifier?: string;
  title?: string;
  session?: string;
  jurisdictionId?: string;
  jurisdictionName?: string;
  chamber?: string | null;
  classification?: string[];
  subjects?: string[];
  statusText?: string | null;
  sponsors?: any[];
  history?: any[];
  versions?: any[];
  sources?: any[];
  abstracts?: any[];
  openstatesUrl?: string;
  firstActionAt?: Date | null;
  latestActionAt?: Date | null;
  latestActionDescription?: string | null;
  latestPassageAt?: Date | null;
  createdAt?: Date;
  updatedAt?: Date;
  stateLegislatureUrl: string;
  fullText?: string | null; // Full text of the legislation, if available
  geminiSummary?: string | null; // Summary generated by Gemini
  summary?: string | null;
  extras?: Record<string, any> | null;
}

// Bookmark/SavedLegislation Types
export interface BookmarkMetadata {
  tags?: string[];
  notes?: string;
  priority?: 'low' | 'medium' | 'high';
  customTitle?: string;
}

export interface LegislationBookmark {
  id: string; // Unique bookmark ID
  userId: string; // Clerk user ID
  legislationId: string; // ID of the saved legislation
  createdAt: Date;
  updatedAt: Date;
  metadata?: BookmarkMetadata;
}

// MongoDB document type for bookmarks
export interface BookmarkMongoDbDocument extends Omit<LegislationBookmark, 'id' | 'createdAt' | 'updatedAt'> {
  _id: import('mongodb').ObjectId;
  id: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface BookmarkButtonProps {
  legislationId: string;
  className?: string;
}

export interface LegislationMongoDbDocument extends Omit<Legislation, 'id' | 'createdAt' | 'updatedAt'> {
  _id: ObjectId;
  id: string;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface RelatedLegislation {
  id: string;
  title?: string;
  identifier?: string;
  jurisdictionName?: string;
  latestActionAt?: Date;
  latestActionDescription?: string;
  subjects?: string[];
  stateLegislatureUrl?: string;
}

export interface Bill {
  id: string;
  identifier: string;
  title: string;
  subject: string[];
  classification: string[];
  from_organization?: {
    name: string;
  };
  latest_action_description?: string;
  latest_action_date?: string;
  abstract?: string;
}

export interface BillSearchProps {
  selectedBills: Bill[];
  onBillSelect: (bill: Bill) => void;
  userLocation?: {
    state?: string;
    city?: string;
  };
  className?: string;
}